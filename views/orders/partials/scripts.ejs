<script src="js/vendor/jquery-3.3.1.min.js"></script>
<script src="js/vendor/bootstrap.bundle.min.js"></script>
<script src="js/vendor/perfect-scrollbar.min.js"></script>
<!-- <script src="js/vendor/datatables.min.js"></script> -->
<script src="js/dore.script.js"></script>
<script src="js/scripts.js"></script>
<script src="/static/js/sweetalert.min.js"></script>
<script src="/static/js/vendor/jquery.validate/jquery.validate.min.js"></script>
<!-- <script src="/static/js/jspdf.min.js"></script> -->
<script>
    const currencyFormatter = new Intl.NumberFormat(['en-CM', 'fr-CM'], {
        currency: 'XAF',
        style: 'currency',
        maximumFractionDigits: 0
    });
    const numberFormatter = new Intl.NumberFormat(['en-CM', 'fr-CM']);

    function updateReceipt(order) {
        $('#receiptModal .modal-title').text(`Invoice Receipt - ${order.code}`);
        $('#receiptInvoiceId').text(`#${new Intl.NumberFormat(['en-CM', 'fr-CM'], {minimumIntegerDigits: 3, maximumFractionDigits: 0, useGrouping: false}).format(order.invoice.id)}`)
        $('#receiptOrderId').text(`#${new Intl.NumberFormat(['en-CM', 'fr-CM'], {minimumIntegerDigits: 3,maximumFractionDigits: 0, useGrouping: false}).format(order.id)}`);
        let invoiceStatus;
        let orderStatus;
        if (order.status == 0) orderStatus = 'RECORDED';
        else if (order.status == 1) orderStatus = 'PENDING DELIVERY';
        else orderStatus = 'DELIVERED';

        if (order.invoice.status == 0) invoiceStatus = 'PAID';
        else if (order.invoice.status == 1) invoiceStatus = 'UNPAID';
        else invoiceStatus = 'PARTIALLY PAID';
        $('#receiptInvoiceStatus').text(invoiceStatus);
        $('#receiptOrderStatus').text(orderStatus);
        $('#receiptDatePrinted').text(new Date().toLocaleDateString(['en-CM', 'fr-CM'], {
            dateStyle: 'short'
        }));
        $('#receiptDateRecorded').text(new Date().toLocaleDateString(['en-CM', 'fr-CM'], {
            dateStyle: 'short'
        }));
        let rowString;
        document.getElementById('receiptInvoiceItems').innerHTML = '';
        for (let item of order.invoice.items) {

            rowString = `
    <td>${item.productName}</td>
    <td>${numberFormatter.format(item.quantity)}</td>
    <td>${item.serviceName}</td>
    `.trim();
            if (item.additionalServices && item.additionalServices.length > 0) {

            }

            document.getElementById('receiptInvoiceItems').innerHTML += rowString;
        }

        $('#receiptFormClientNames').text(`${order.customer.first_name} ${order.customer.last_name || ''}`.trim());
        $('#receiptFormTaxAmount').text(currencyFormatter.format(order.invoice.tax));
        $('#receiptFormDiscount').text(currencyFormatter.format(order.invoice.discount));
        $('#receiptFormAmountPaid').text(currencyFormatter.format(order.invoice.amountPaid));
        $('#receiptOutstanding').text(currencyFormatter.format(Math.abs(order.invoice.balance)));
        $('#receiptNetPayable').text(currencyFormatter.format(Math.abs(order.invoice.netPayable)));

    }

    $(document).ready(function() {
        $('#updateInvoiceForm').validate();
        $('#updateInvoiceForm').submit(function(e) {
            e.preventDefault();
            const orderId = $('#orderIdInput').val();
            if (!orderId) return;
            const data = updatingInvoice;
            $.ajax({
                url: `/orders/${orderId}`,
                method: 'PUT',
                data,
                success: succ => {
                    Swal.fire({
                        title: 'Success',
                        text: 'Invoice updated successfully',
                        icon: 'success'
                    }).then(() => location.reload());
                },
                error: err => {
                    Swal.fire({
                        title: 'Error',
                        text: err.responseJSON ? err.responseJSON.text : 'Invoice update failed',
                        icon: 'error'
                    })
                }
            })
        });
        $('.dropdown-item.print').each(function() {
            $(this).click(function(e) {
                e.preventDefault();

                const orderId = $(this).data('id');
                if (orderId === null || orderId === undefined || orderId <= 0) return;
                $.ajax({
                    url: '/orders/for_receipt/' + orderId,
                    method: 'GET',
                    success: function({
                        order
                    }) {
                        updateReceipt(order);
                        $('#receiptModal').modal('show');
                    },
                    error: function(err) {
                        let msg;
                        if (err.status == 0) {
                            msg = 'Could not reach server';
                        } else if (err.status == 404) {
                            msg = 'Order not found';
                        } else {
                            msg = 'An error occurred';
                        }
                        Swal.fire({
                            title: 'Error',
                            text: msg,
                            icon: 'error'
                        });
                    }
                })
            })
        });

        $('.dropdown-item.update').each(function() {
            $(this).click(function(e) {
                e.preventDefault();
                const orderId = $(this).data('id');
                if (orderId == null || orderId == undefined || orderId <= 0) return;
                $.ajax({
                    url: '/orders/for_update/' + orderId,
                    method: 'GET',
                    success: ({

                        invoice
                    }) => {
                        $('#orderIdInput').val(orderId);
                        updatingInvoice = {
                            orderCode: invoice.orderCode,
                            orderId: parseInt(invoice.orderId),
                            invoiceId: parseInt(invoice.invoiceId),
                            clientNames: invoice.clientNames,
                            serviceCount: parseInt(invoice.serviceCount),
                            tax: parseFloat(invoice.tax),
                            total: parseFloat(invoice.total),
                            netPayable: parseFloat(invoice.netPayable),
                            dueDate: invoice.dueDate,
                            paymentType: invoice.paymentType,
                            amountPaid: parseFloat(invoice.amountPaid),
                            discount: parseFloat(invoice.discount),
                            markAsDelivered: invoice.markAsDelivered === undefined || invoice.markAsDelivered === null ? false : invoice.markAsDelivered == 'true'
                        };
                        $('#invoiceUpdateFormModal').modal({
                            backdrop: 'static'
                        });
                        updateForm();
                    }
                });
            });
        });

        $('.money-btns button').each(function() {
            $(this).click(function(e) {
                const currentAmountPaid = parseFloat($('#invoiceFormAmountPaid').val());
                const amountToBeAdded = parseFloat($(this).text().split(' ').join(''));
                if (currentAmountPaid + amountToBeAdded

                    <
                    0) {
                    $('#invoiceFormAmountPaid').val(0);
                } else $('#invoiceFormAmountPaid').val(currentAmountPaid + amountToBeAdded);
                $('#invoiceFormAmountPaid').change();
            });
        });

        $('#invoiceFormPaymentType').on('change input', function() {
            updatingInvoice.paymentType = $(this).val();
        });

        $('#markDelivered').change(function() {
            const value = this.checked;
            console.log(value);
            updatingInvoice.markAsDelivered = value;
        });

        $('#invoiceFormAmountPaid').on('input change', function(e) {
            const value = parseFloat($(this).val());
            const _isNan = isNaN(value);
            if (_isNan) {
                $(this).val(0);
                $(this).trigger('input');
                return;
            }
            updatingInvoice.amountPaid = value;
            computeBilling();
        });

        const defaultInvoice = {
            clientNames: 'N/A',
            serviceCount: 0,
            tax: 0,
            total: 0,
            netPayable: 0,
            dueDate: new Date(),
            paymentType: 'cash',
            amountPaid: 0
        };

        let updatingInvoice = {
            ...defaultInvoice
        };

        function updateForm() {
            $('#updateInvoiceForm .modal-title').text(`Invoice - ${updatingInvoice.orderCode}`);
            $('.modal-body dl dd:nth-child(2) h3').text(updatingInvoice.clientNames);
            $('.modal-body dl dd:nth-child(4)').text(numberFormatter.format(updatingInvoice.serviceCount));
            $('.modal-body dl dd:nth-child(6)').text(currencyFormatter.format(updatingInvoice.tax));
            $('.modal-body dl dd:nth-child(8)').text(currencyFormatter.format(updatingInvoice.discount));
            $('.modal-body dl dd:nth-child(10)').text(currencyFormatter.format(updatingInvoice.total));
            $('.modal-body dl dd:nth-child(12)').text(currencyFormatter.format(updatingInvoice.netPayable));
            document.getElementById('markDelivered').checked = updatingInvoice.markAsDelivered;

            const now = new Date();
            const month = now.getMonth() + 1 < 10 ? `0${now.getMonth()+1}` : `${now.getMonth()+1}`;
            const day = (now.getDate() + 1) < 10 ? `0${now.getDate()+1}` : `${now.getDate()+1}`;
            const minDate = `${now.getFullYear()}-${month}-${day}`;
            $('#dueDate').attr('min', minDate);
            document.getElementById('dueDate').valueAsDate = new Date(updatingInvoice.dueDate);
            $('#invoiceFormPaymentType').val(updatingInvoice.paymentType);
            $('#invoiceFormAmountPaid').val(updatingInvoice.amountPaid);
            computeBilling();
        }

        function computeBilling() {
            const tax = updatingInvoice.tax;
            const discount = updatingInvoice.discount;
            const total = updatingInvoice.total;
            const amountPaid = updatingInvoice.amountPaid;
            const netPayable = updatingInvoice.netPayable;
            const outstanding = netPayable - amountPaid;
            const clientName = updatingInvoice.clientNames;
            if (amountPaid <= 0) {
                $('.money-btns .btn-outline-danger').each(function() {
                    $(this).hide();
                });
            } else {
                $('.money-btns .btn-outline-danger').each(function() {
                    $(this).show();
                });
            }
            let balanceDescriptionText;
            if (outstanding < 0) {
                balanceDescriptionText = `<b style="font-size: 1.1rem">${currencyFormatter.format(Math.abs(outstanding))}</b> is to be given to <b style="font-size: 1.1rem">${clientName}</b> as change`;
                $('#invoiceFormBalanceDescription').removeClass('text-danger');
                $('#invoiceFormBalanceText').removeClass('text-danger');
                $('.btn-print').show();
                $('#lblmarkAsDelivered').show();
            } else if (outstanding > 0) {
                balanceDescriptionText = `<b style="font-size: 1.1rem">${currencyFormatter.format(Math.abs(outstanding))}</b> is outstanding for <b style="font-size: 1.1rem">${clientName}</b> to pay`;
                $('#invoiceFormBalanceDescription').addClass('text-danger');
                $('#invoiceFormBalanceText').addClass('text-danger');
                $('.btn-print').hide();
                $('#lblmarkAsDelivered').hide();
            } else {
                balanceDescriptionText = '';
                $('#invoiceFormBalanceDescription').removeClass('text-danger');
                $('#invoiceFormBalanceText').removeClass('text-danger');
                $('.btn-print').show();
                $('#lblmarkAsDelivered').show();
            }
            document.getElementById('invoiceFormBalanceDescription').innerHTML = balanceDescriptionText;
            $('#invoiceFormBalanceText').text(currencyFormatter.format(Math.abs(outstanding)));
        }

        computeBilling();
    });
</script>