<script src="/static/js/vendor/jquery-3.3.1.min.js"></script>
<script src="/static/js/vendor/bootstrap.bundle.min.js"></script>
<script src="/static/js/vendor/Chart.bundle.min.js"></script>
<script src="/static/js/vendor/chartjs-plugin-datalabels.js"></script>
<script src="/static/js/vendor/moment.min.js"></script>
<script src="/static/js/vendor/fullcalendar.min.js"></script>
<script src="/static/js/vendor/datatables.min.js"></script>
<script src="/static/js/vendor/perfect-scrollbar.min.js"></script>
<script src="/static/js/vendor/progressbar.min.js"></script>
<script src="/static/js/vendor/jquery.barrating.min.js"></script>
<script src="/static/js/vendor/select2.full.js"></script>
<script src="/static/js/vendor/nouislider.min.js"></script>
<script src="/static/js/vendor/bootstrap-datepicker.js"></script>
<script src="/static/js/vendor/Sortable.js"></script>
<script src="/static/js/vendor/mousetrap.min.js"></script>
<script src="/static/js/vendor/glide.min.js"></script>
<script src="/static/js/dore.script.js"></script>
<script src="/static/js/scripts.js"></script>
<script src="/static/js/sweetalert.min.js"></script>
<script src="/static/js/vendor/jquery.validate/jquery.validate.min.js"></script>
<script src="/static/js/print.min.js"></script>

<script>
    let entries = [];
    let priceMap = {};
    const currencyFormatter = new Intl.NumberFormat(['fr-CM', 'fr-CM'], {
        currency: 'XAF',
        style: 'currency',
        maximumFractionDigits: 0
    });
    const numberFormatter = new Intl.NumberFormat(['fr-CM', 'fr-CM']);
    const defaultEditingEntry = {
        productId: null,
        productName: null,
        serviceName: null,
        serviceId: null,
        quantity: 1,
        price: function() {
            const priceMapEntry = priceMap[`${this.productId}`];
            if (!priceMapEntry) return 0;

            let _price = this.priceMode == 'normal' ? priceMapEntry[`${this.serviceId}`].normalPrice : priceMapEntry[`${this.serviceId}`].fastPrice;

            for (let {
                    serviceId
                }
                of this.additionalServices) {
                if (!priceMapEntry[`${serviceId}`]) continue;
                _price += this.priceMode == 'normal' ? priceMapEntry[`${serviceId}`].normalPrice : priceMapEntry[`${serviceId}`].fastPrice;
            }
            return _price * this.quantity;
        },
        priceMode: 'normal',
        additionalServices: [],
        isValid: function() {
            const ans = this.productId != null && this.productId > 0 &&
                this.productName != null && this.productName !== '' &&
                this.serviceName != null && this.serviceName !== '' &&
                this.serviceId != null && this.serviceId > 0 &&
                this.quantity >= 1
            return ans;
        }
    };
    let editingEntry = {
        ...defaultEditingEntry
    };
    $(document).ready(function() {
        $('#print-receipt').click(function() {
            printJS({
                printable: 'printable-content',
                type: 'html',
                header: 'Generated Receipt',
                css: ['/static/css/print.min.css',
                    '/static/css/main.css',
                    '/static/css/vendor/bootstrap.min.css'
                ]
            });

        });

        $('#orderFind').on('change input', function(e) {
            e.preventDefault();
            updateInvoice($(this).val());
        });

        $('#orderFind').select2({
            ajax: {
                delay: 2000,
                url: '/orders/lookup',
                data: function(params) {
                    var query = {
                        q: params.term,
                        size: 50
                    };

                    return query;
                },
                processResults: function(data) {
                    return {
                        results: [...data]
                    };
                }
            }
        });

        function computeBilling() {
            const discount = parseFloat($('#discountInput').val());
            const tax = parseFloat($('#taxInput').val());
            const total = (tax || 0) + entries.map(entry => entry.price()).reduce((acc, curr) => acc + curr, 0);
            const netPayable = total - (discount || 0);
            const currencyFormatter = new Intl.NumberFormat('en-CM', {
                currency: 'XAF',
                style: 'currency',
                maximumFractionDigits: 0
            });
            const currentAmountPaid = parseFloat($('#invoiceFormAmountPaid').val());
            const balance = netPayable - currentAmountPaid;
            const clientName = $('#invoiceForm .modal-body dl dd:nth-child(2) > h3').text().trim();
            if (currentAmountPaid <= 0) {
                $('.money-btns .btn-outline-danger').each(function() {
                    $(this).hide();
                });
            } else {
                $('.money-btns .btn-outline-danger').each(function() {
                    $(this).show();
                });
            }
            let balanceDescriptionText;
            if (balance < 0) {
                balanceDescriptionText = `<b style="font-size: 1.1rem">${currencyFormatter.format(Math.abs(balance))}</b> is to be given to <b style="font-size: 1.1rem">${clientName}</b> as change`;
                $('#invoiceFormBalanceDescription').removeClass('text-danger');
                $('#invoiceFormBalanceText').removeClass('text-danger');
                $('.btn-print').show();
            } else if (balance > 0) {
                balanceDescriptionText = `<b style="font-size: 1.1rem">${currencyFormatter.format(Math.abs(balance))}</b> is outstanding for <b style="font-size: 1.1rem">${clientName}</b> to pay`;
                $('#invoiceFormBalanceDescription').addClass('text-danger');
                $('#invoiceFormBalanceText').addClass('text-danger');
                $('#invoiceForm .btn-print').hide();
            } else {
                $('#invoiceFormBalanceDescription').removeClass('text-danger');
                $('#invoiceFormBalanceText').removeClass('text-danger');
                $('#invoiceForm .btn-print').show();
                balanceDescriptionText = '';
            }
            if (netPayable == 0) {
                $('#invoiceForm .money-btns').hide();
                $('#invoiceFormAmountPaid').hide();
            } else {
                $('#invoiceForm .money-btns').show();
                $('#invoiceFormAmountPaid').show();
            }
            if (currentAmountPaid <= 0) {
                $('#invoiceForm .money-btns .btn-outline-danger').each(function() {
                    $(this).hide();
                });
            } else {
                $('.money-btns .btn-outline-danger').each(function() {
                    $(this).show();
                });
            }
            document.getElementById('invoiceFormBalanceDescription').innerHTML = balanceDescriptionText;
            $('#invoiceFormBalanceText').text(currencyFormatter.format(Math.abs(normalize(balance, 0, Number.MAX_VALUE))));
            $('#net-payable').text(currencyFormatter.format(netPayable));
            $('#total').text(currencyFormatter.format(total));
            $('#invoiceForm .modal-body dl dd:nth-child(4)').text(entries.map(entry => entry.additionalServices.length + 1).reduce((acc, curr) => acc + curr, 0).toLocaleString());
            $('#invoiceForm .modal-body dl dd:nth-child(6)').text(currencyFormatter.format(tax));
            $('#invoiceForm .modal-body dl dd:nth-child(8)').text(currencyFormatter.format(discount));
            $('#invoiceForm .modal-body dl dd:nth-child(10)').text(currencyFormatter.format(total));
            $('#invoiceForm .modal-body dl dd:nth-child(12)').text(currencyFormatter.format(netPayable));
        }
        computeBilling();

        function updateUpdateInvoiceForm() {
            $('#updateInvoiceForm .modal-title').text(`Invoice - ${updatingInvoice.orderCode}`);
            $('#updateInvoiceForm .modal-body dl dd:nth-child(2) h3').text(updatingInvoice.clientNames);
            $('#updateInvoiceForm .modal-body dl dd:nth-child(4)').text(numberFormatter.format(updatingInvoice.serviceCount));
            $('#updateInvoiceForm .modal-body dl dd:nth-child(6)').text(currencyFormatter.format(updatingInvoice.tax));
            $('#updateInvoiceForm .modal-body dl dd:nth-child(8)').text(currencyFormatter.format(updatingInvoice.discount));
            $('#updateInvoiceForm .modal-body dl dd:nth-child(10)').text(currencyFormatter.format(updatingInvoice.total));
            $('#updateInvoiceForm .modal-body dl dd:nth-child(12)').text(currencyFormatter.format(updatingInvoice.netPayable));
            document.getElementById('markDelivered').checked = updatingInvoice.markAsDelivered;

            const now = new Date();
            const month = now.getMonth() + 1

                <
                10 ? `0${now.getMonth()+1}` : `${now.getMonth()+1}`;
            const day = (now.getDate() + 1) < 10 ? `0${now.getDate()+1}` : `${now.getDate()+1}`;
            const minDate = `${now.getFullYear()}-${month}-${day}`;
            $('#updateInvoiceDueDate').attr('min', minDate);
            document.querySelector('#updateInvoiceDueDate').valueAsDate = new Date(updatingInvoice.dueDate);
            $('#updateInvoiceFormPaymentType').val(updatingInvoice.paymentType);
            $('#updateInvoiceFormAmountPaid').val(updatingInvoice.amountPaid);
            $('#updateInvoiceFormAmountPaid').attr('min', updatingInvoice.amountPaid);
            computeUpdateBilling();
        }
        $('#invoiceUpdateFormModal').on('shown.bs.modal', function() {
            updateUpdateInvoiceForm();
        });
        let updatingInvoice;
        let pristineUpdatingInvoiceAmountPaid

        function updateInvoice(orderId) {
            if (orderId === undefined || orderId === null) return;
            $.ajax({
                url: '/orders/for_update/' + orderId,
                method: 'GET',
                success: ({
                    invoice
                }) => {
                    $('#orderIdInput').val(orderId);
                    updatingInvoice = {
                        orderCode: invoice.orderCode,
                        orderId: parseInt(invoice.orderId),
                        invoiceId: parseInt(invoice.invoiceId),
                        clientNames: invoice.clientNames,
                        serviceCount: parseInt(invoice.serviceCount),
                        tax: parseFloat(invoice.tax),
                        total: parseFloat(invoice.total),
                        netPayable: parseFloat(invoice.netPayable),
                        dueDate: invoice.dueDate,
                        paymentType: invoice.paymentType,
                        amountPaid: parseFloat(invoice.amountPaid),
                        discount: parseFloat(invoice.discount),
                        markAsDelivered: invoice.markAsDelivered === undefined || invoice.markAsDelivered === null ? false : invoice.markAsDelivered == 'true'
                    };
                    pristineUpdatingInvoiceAmountPaid = updatingInvoice.amountPaid;
                    $('#invoiceUpdateFormModal').modal({
                        backdrop: 'static'
                    });
                },
                error: err => {
                    Swal.fire(
                        'Error',
                        err.statusText,
                        'error'
                    );
                }
            })
        }

        function computeUpdateBilling() {
            const tax = updatingInvoice.tax;
            const discount = updatingInvoice.discount;
            const total = updatingInvoice.total;
            const amountPaid = updatingInvoice.amountPaid;
            const netPayable = updatingInvoice.netPayable;
            const outstanding = netPayable - amountPaid;
            const clientName = updatingInvoice.clientNames;
            if (netPayable == 0) {
                $('#updateInvoiceForm .money-btns .btn-outline-primary').each(function() {
                    $(this).hide();
                });
                $('#updateInvoiceForm .money-btns .btn-outline-danger').each(function() {
                    $(this).hide();
                });
                $('#updateInvoiceFormAmountPaid').parents('.form-group').hide();
                $('#updateInvoiceFormPaymentType').parents('.form-group').hide();
                $('#updateInvoiceDueDate').parents('.form-group').hide();
            } else if (amountPaid <= 0) {
                $('#updateInvoiceForm .money-btns .btn-outline-danger').each(function() {
                    $(this).hide();
                });
                $('#updateInvoiceFormAmountPaid').parents('.form-group').show();
                $('#updateInvoiceFormPaymentType').parents('.form-group').show();
                $('#updateInvoiceDueDate').parents('.form-group').show();
            } else {
                $('.money-btns .btn-outline-danger').each(function() {
                    $(this).show();
                });
                $('#updateInvoiceFormAmountPaid').parents('.form-group').show();
                $('#updateInvoiceFormPaymentType').parents('.form-group').show();
                $('#updateInvoiceDueDate').parents('.form-group').show();
            }
            let balanceDescriptionText;
            if (outstanding

                <
                0) {
                balanceDescriptionText = `<b style="font-size: 1.1rem">${currencyFormatter.format(Math.abs(outstanding))}</b> is to be given to <b style="font-size: 1.1rem">${clientName}</b> as change`;
                $('#updateInvoiceFormBalanceDescription').removeClass('text-danger');
                $('#updateInvoiceFormBalanceText').removeClass('text-danger');
                $('#updateInvoicePrintBtn').show();
                $('#lblmarkAsDelivered').show();
                $('#updateInvoiceForm .money-btns .btn-outline-primary').each(function() {
                    $(this).hide();
                });
            } else if (outstanding > 0) {
                balanceDescriptionText = `<b style="font-size: 1.1rem">${currencyFormatter.format(Math.abs(outstanding))}</b> is outstanding for <b style="font-size: 1.1rem">${clientName}</b> to pay`;
                $('#updateInvoiceFormBalanceDescription').addClass('text-danger');
                $('#updateInvoiceFormBalanceText').addClass('text-danger');
                $('#updateInvoicePrintBtn').hide();
                $('#lblmarkAsDelivered').hide();
                $('#updateInvoiceForm .money-btns .btn-outline-primary').each(function() {
                    $(this).show();
                });
            } else {
                balanceDescriptionText = '';
                $('#updateInvoiceFormBalanceDescription').removeClass('text-danger');
                $('#updateInvoiceFormBalanceText').removeClass('text-danger');
                $('#updateInvoicePrintBtn').show();
                $('#lblmarkAsDelivered').show();
            }
            document.getElementById('updateInvoiceFormBalanceDescription').innerHTML = balanceDescriptionText;
            $('#updateInvoiceFormBalanceText').text(currencyFormatter.format(Math.abs(normalize(outstanding, 0, Number.MAX_VALUE))));
        }

        $('#updateInvoiceFormAmountPaid').on('change input', function() {
            const value = parseFloat($(this).val());
            const _isNan = isNaN(value);
            if (_isNan) {
                $(this).val(0);
                $(this).trigger('input');
                return;
            }
            updatingInvoice.amountPaid = value;
            computeUpdateBilling();
        });

        $('#updateInvoiceForm .money-btns button').each(function() {
            $(this).click(function(e) {
                const currentAmountPaid = parseFloat($('#updateInvoiceFormAmountPaid').val());
                const amountToBeAdded = parseFloat($(this).text().split(' ').join(''));
                if (currentAmountPaid + amountToBeAdded

                    <
                    pristineUpdatingInvoiceAmountPaid) {
                    $('#updateInvoiceFormAmountPaid').val(pristineUpdatingInvoiceAmountPaid);
                } else $('#updateInvoiceFormAmountPaid').val(currentAmountPaid + amountToBeAdded);
                $('#updateInvoiceFormAmountPaid').change();
            })
        })
        function normalize(n, min, max) {
            if (n < min) return min;
            if (n > max) return max;
            return n;
        }
        $('#product-tabs a').each(function() {
            $(this).click(function(e) {
                e.preventDefault();
                const productId = $(this).data('productId');
                if (editingEntry.productId === productId) {
                    $(`#product-tabs a[data-product-id=${productId}]`).each(function() {
                        $(this).removeClass('btn-primary');
                        $(this).addClass('btn-outline-primary');
                    });
                    if (editingEntry.serviceId) {
                        $(`button[data-service-id=${editingEntry.serviceId}]`).each(function() {
                            $(this).removeClass('btn-primary');
                            $(this).addClass('btn-outline-primary');
                        })
                    }
                    if (editingEntry.additionalServices.length > 0) {
                        for (let additionalService of editingEntry.additionalServices) {
                            $(`button[data-additional-service-id=${additionalService.serviceId}]`).removeClass('btn-primary');
                            $(`button[data-additional-service-id=${additionalService.serviceId}]`).addClass('btn-outline-primary');
                        }
                    }
                    editingEntry = {
                        ...defaultEditingEntry
                    };
                } else if (editingEntry.productId == null) {
                    editingEntry.productId = productId;
                    editingEntry.productName = $(this).children('p').text().trim();

                    $(`#product-tabs a[data-product-id=${productId}]`).each(function() {
                        $(this).removeClass('btn-outline-primary');
                        $(this).addClass('btn-primary');
                    });
                } else {
                    $(`#product-tabs a[data-product-id=${editingEntry.productId}]`).each(function() {
                        $(this).removeClass('btn-primary');
                        $(this).addClass('btn-outline-primary');
                    });
                    editingEntry.productId = productId;
                    editingEntry.productName = $(this).children('p').text().trim();
                    $(`#product-tabs a[data-product-id=${productId}]`).each(function() {
                        $(this).removeClass('btn-outline-primary');
                        $(this).addClass('btn-primary');
                    });
                }
                editingEntryUpdated();
            });
        });

        function editingEntryUpdated() {
            if (editingEntry === defaultEditingEntry || !editingEntry.productId || editingEntry.productId == '' || priceMap[editingEntry.productId] != null) return;
            const allServiceIds = [];
            document.querySelectorAll(`.service-container button[data-service-id]`).forEach(e => allServiceIds.push(e.dataset.serviceId));
            document.querySelectorAll(`.additional-service-container button[data-additional-service-id]`).forEach(e => allServiceIds.push(e.dataset.additionalServiceId));
            $.ajax({
                url: `/products/prices`,
                method: 'POST',
                data: {
                    requests: {
                        productId: editingEntry.productId,
                        serviceIds: allServiceIds
                    }
                },
                success: map => {
                    priceMap[editingEntry.productId] = {};
                    for (let entry of map.servicePrices) {
                        priceMap[`${editingEntry.productId}`][`${entry.serviceId}`] = {
                            normalPrice: entry.normalPrice,
                            fastPrice: entry.fastPrice
                        };
                    }
                }
            });
        }

        $('#addEntryToCartButton').click(function(e) {
            e.preventDefault();
            if (editingEntry.isValid()) {
                editingEntry.color = $('input[type=color]').val();
                entries.push({
                    ...editingEntry
                });
                // debugger;
                $(`#product-tabs a[data-product-id=${editingEntry.productId}]`).each(function() {
                    $(this).removeClass('btn-primary');
                    $(this).addClass('btn-outline-primary');
                });
                if (editingEntry.serviceId) {
                    $(`button[data-service-id=${editingEntry.serviceId}]`).each(function() {
                        $(this).removeClass('btn-primary');
                        $(this).addClass('btn-outline-primary');
                    })
                }
                if (editingEntry.additionalServices.length > 0) {
                    for (let additionalService of editingEntry.additionalServices) {
                        $(`button[data-additional-service-id=${additionalService.serviceId}]`).each(function() {
                            $(this).removeClass('btn-primary');
                            $(this).addClass('btn-outline-primary');
                        });
                    }
                }
                $('#entryQuantity').val(1);
                $('#entryColour').val('#ffffff');
                $('#pricingModeInput').val('normal');
                editingEntry = {
                    ...defaultEditingEntry
                };
                updateCartEntries();
            } else {
                let msg;
                if (editingEntry.productId == null || editingEntry.productId <= 0)
                    msg = 'Please select a product';
                else if (!editingEntry.serviceId || editingEntry.serviceId <= 0)
                    msg = 'A service has to be selected';
                else
                    msg = 'Unable to add entry to billing cart. Invalid data';

                Swal.fire({
                    title: 'Validation Error',
                    text: msg,
                    icon: 'error'
                });
            }
        });

        $('#decrementQuantity').click(function(e) {
            if (editingEntry.quantity <= 1) return;
            document.getElementById('entryQuantity').stepDown();
            editingEntry.quantity = parseInt(document.getElementById('entryQuantity').value);
        });

        $('#incrementQuantity').click(function(e) {
            document.getElementById('entryQuantity').stepUp();
            editingEntry.quantity = parseInt(document.getElementById('entryQuantity').value);
        });

        function updateCartEntries() {
            const tableContent = document.querySelectorAll('#entries-table tr')
            tableContent.forEach((row, pos) => {
                if (pos == 0) return;
                row.remove();
            });
            const formatter = new Intl.NumberFormat('en-CM', {
                currency: 'XAF',
                style: 'currency',
                maximumFractionDigits: 0
            });
            let i = 0;
            for (let entry of entries) {
                let additionalServicesEntry = ``;
                if (entry.additionalServices && entry.additionalServices.length > 0) {
                    for (let additionalService of entry.additionalServices) {
                        additionalServicesEntry += `<span style="cursor: pointer;font-size: .7rem" title="Remove this service" class="a-service badge mr-1 badge-pill badge-info">${additionalService.serviceName}</span>`;
                    }
                }
                if (additionalServicesEntry.length > 0) {
                    additionalServicesEntry = `<div class="d-flex w-100 flex-wrap justify-content-around">${additionalServicesEntry}</div>`;
                }
                const element = `
                        <tr data-entry-id="${i++}" class="w-100">
                            <td>${entry.productName}</td>
                            <td><div style="font-size: 1.2rem" class="input-group"><div class="input-group-prepend"><button type="button" class="btn btn-decr btn-primary">-</button></div><input class="form-control quantity-input" type="number" value="${entry.quantity}" min="1" max="100" step="1"><div class="input-group-append"><button type="button" class="btn btn-incr btn-primary">+</button></div></div></td>
                            <td>${entry.serviceName}</td>
                            <td>${additionalServicesEntry}</td>
                            <td>${formatter.format(entry.price())}</td>
                            <td>
                                <div class="btn-group">
                                    <button data-product-id="${entry.productId}" title="Remove this entry" type="button" class="btn btn-delete-entry btn-outline-danger btn-sm"><i class="fa-solid fa-trash"></i></button>
                                </div>
                            </td>
                        </tr>`.trim();
                document.querySelector('#billing-table-body').innerHTML += element;
            }

            computeBilling();
            updateBillingEntryEventHandlers();
        }

        function updateBillingEntryEventHandlers() {
            const formatter = new Intl.NumberFormat('en-CM', {
                currency: 'XAF',
                style: 'currency',
                maximumFractionDigits: 0
            });

            $('#entries-table span.a-service').each(function() {
                $(this).change(function(e) {
                    $(this)[0].remove();
                });
            })

            $('#entries-table input.quantity-input').each(function() {
                $(this).change(function(e) {
                    const row = $(this).parents('tr');
                    const i = row.data('entry-id');
                    if (i === undefined || i == null) return;
                    const entry = entries[i];
                    const priceField = row.find('td:nth-child(5)');
                    priceField.text(formatter.format(entry.price()));
                    computeBilling();
                })
            })

            $('#entries-table button.btn-decr').each(function() {
                $(this).click(function(e) {
                    const row = $(this).parents('tr');
                    const i = row.data('entry-id');
                    if (i === undefined || i == null) return;
                    const entry = entries[i];
                    if (entry.quantity <= 1) return;
                    entry.quantity--;
                    const quantityInput = row.find('input[type=number]');
                    if (!quantityInput) return;
                    quantityInput.val(entry.quantity);
                    quantityInput.change();
                });
            });

            $('#entries-table button.btn-incr').each(function() {
                $(this).click(function(e) {
                    const row = $(this).parents('tr');
                    const i = row.data('entry-id');
                    if (i === undefined || i == null) return;
                    const quantityInput = row.find('input[type=number]');
                    const entry = entries[i];
                    entry.quantity++;
                    if (!quantityInput) return;
                    quantityInput.val(entry.quantity);
                    quantityInput.change();
                });
            });

            $('#entries-table button.btn-delete-entry').each(function() {
                $(this).click(function(e) {
                    const row = $(this).parents('tr');
                    const i = row.data('entry-id');
                    if (i === undefined || i == null) return;
                    entries = entries.filter((_, index) => index != i);
                    row.remove();
                    updateCartEntries();
                });
            });
        }

        $('#clientsearch').change(function(e) {
            const selectedClientId = $(this).val();
            const selectedClientName = $(this).find(`option[value=${selectedClientId}]`).text()
            $('#invoiceForm .modal-body dl dd:nth-child(2) > h3').text(selectedClientName);
        })
        $('#invoiceFormAmountPaid').on('input change', function(e) {
            const value = parseFloat($(this).val());
            const _isNan = isNaN(value);
            if (_isNan) {
                $(this).val(0);
                $(this).trigger('input');
                return;
            }
            computeBilling();
        });

        computeBilling();
        document.querySelectorAll('#discountInput,#taxInput').forEach(e => {
            e.addEventListener('input', () => {
                computeBilling();
            });
        });

        $('#pricingModeInput').change(function() {
            editingEntry.priceMode = $(this).val();
        });

        $('.money-btns button').each(function() {
            $(this).click(function(e) {
                const currentAmountPaid = parseFloat($('#invoiceFormAmountPaid').val());
                const amountToBeAdded = parseFloat($(this).text().split(' ').join(''));
                if (currentAmountPaid + amountToBeAdded

                    <
                    0) {
                    $('#invoiceFormAmountPaid').val(0);
                } else
                    $('#invoiceFormAmountPaid').val(currentAmountPaid + amountToBeAdded);
                $('#invoiceFormAmountPaid').change();
            });
        });

        $('button[data-service-id]').each(function() {

            $(this).click(function(e) {
                e.preventDefault();
                const serviceId = $(this).data('serviceId');
                const serviceName = $(this).text().trim();
                if (!serviceId) return;

                if (editingEntry.serviceId == null) {
                    editingEntry.serviceId = serviceId;
                    editingEntry.serviceName = serviceName;
                    $(this).removeClass('btn-outline-primary');
                    $(this).addClass('btn-primary');
                } else if (editingEntry.serviceId == serviceId) {
                    editingEntry.serviceId = null;
                    editingEntry.serviceName = null;
                    $(this).removeClass('btn-primary');
                    $(this).addClass('btn-outline-primary');
                } else {
                    $(`button[data-service-id=${editingEntry.serviceId}]`).removeClass('btn-primary');
                    $(`button[data-service-id=${editingEntry.serviceId}]`).addClass('btn-outline-primary');
                    $(this).removeClass('btn-outline-primary');
                    $(this).addClass('btn-primary');
                    editingEntry.serviceId = serviceId;
                    editingEntry.serviceName = serviceName;
                }
                editingEntryUpdated();
            });
        });

        $('button[data-additional-service-id]').each(function() {
            $(this).click(function(e) {
                e.preventDefault();
                const serviceId = $(this).data('additional-service-id');
                const serviceName = $(this).text().trim();
                if (editingEntry.additionalServices.some(service => service.serviceId == serviceId)) {
                    $(this).removeClass('btn-primary');
                    $(this).addClass('btn-outline-primary');
                    editingEntry.additionalServices = editingEntry.additionalServices.filter(service => service.serviceId != serviceId);
                } else {
                    $(this).removeClass('btn-outline-primary');
                    $(this).addClass('btn-primary');
                    editingEntry.additionalServices.push({
                        serviceId,
                        serviceName
                    });
                }
            });
        })

        const updateQuantity = function(e) {
            editingEntry.quantity = $(this).val();
        };

        document.getElementById('entryQuantity').addEventListener('change', updateQuantity);
        document.getElementById('entryQuantity').addEventListener('input', updateQuantity);

        $('#new-order-form').validate({
            errorClass: 'text-danger d-block',
            rules: {

            }
        });
        $('#new-order-form').submit(function(e) {
            e.preventDefault();

            let msg = '';

            if (entries.length == 0) {
                msg = 'You must have at least one product added to billing'
            } else if (!$('#clientsearch').val() || $('#clientsearch').val() == '') {
                msg = 'A client must be selected or added';
            }

            if (msg && msg.length > 0) {
                Swal.fire({
                    title: 'Error',
                    text: msg,
                    icon: 'error'
                });
                return;
            }
            computeBilling();
            $('#invoiceModal').modal({
                backdrop: 'static'
            });
        });

        function renderReceipt(orderId) {
            $.ajax({
                url: '/orders/for_receipt/' + orderId,
                method: 'GET',
                success: function({
                    order
                }) {
                    updateReceipt(order);
                    $('#receiptModal').modal('show');
                },
                error: function(err) {
                    let msg;
                    if (err.status == 0) {
                        msg = 'Could not reach server';
                    } else if (err.status == 404) {
                        msg = 'Order not found';
                    } else {
                        msg = 'An error occurred';
                    }
                    Swal.fire({
                        title: 'Error',
                        text: msg,
                        icon: 'error'
                    });
                }
            })
        }

        function updateReceipt(order) {
            $('#receiptModal .modal-title').text(`Invoice Receipt - ${order.code}`);
            $('#receiptInvoiceId').text(`#${new Intl.NumberFormat(['en-CM', 'fr-CM'], {minimumIntegerDigits: 3, maximumFractionDigits: 0, useGrouping: false}).format(order.invoice.id)}`)
            $('#receiptOrderId').text(`#${new Intl.NumberFormat(['en-CM', 'fr-CM'], {minimumIntegerDigits: 3,maximumFractionDigits: 0, useGrouping: false}).format(order.id)}`);
            let invoiceStatus;
            let orderStatus;
            if (order.status == 0) orderStatus = 'RECORDED';
            else if (order.status == 1) orderStatus = 'PENDING DELIVERY';
            else orderStatus = 'DELIVERED';

            if (order.invoice.status == 0) invoiceStatus = 'PAID';
            else if (order.invoice.status == 1) invoiceStatus = 'UNPAID';
            else invoiceStatus = 'PARTIALLY PAID';
            $('#receiptInvoiceStatus').text(invoiceStatus);
            $('#receiptOrderStatus').text(orderStatus);
            $('#receiptDatePrinted').text(new Date().toLocaleDateString(['en-CM', 'fr-CM'], {
                dateStyle: 'short'
            }));
            $('#receiptDateRecorded').text(new Date().toLocaleDateString(['en-CM', 'fr-CM'], {
                dateStyle: 'short'
            }));
            let rowString;
            document.getElementById('receiptInvoiceItems').innerHTML = '';
            let totalPrice = 0;
            for (let item of order.invoice.items) {

                rowString = `
        <td>${item.productName}</td>
        <td>${numberFormatter.format(item.quantity)}</td>
        <td>${item.serviceName} ${currencyFormatter.format(item.servicePriceSnapshot / item.quantity)}</td>
        <td>
          `.trim();
                if (item.additionalServices && item.additionalServices.length > 0) {
                    rowString += `<div class="d-flex flex-wrap">`;
                    rowString += item.additionalServices.map(service => [service.serviceName, service.price])
                        .map(([name, price]) => `<span class="mx-1">${name} ${currencyFormatter.format(price / item.quantity)}</span>`);
                    rowString += '</div>';
                } else {
                    rowString += '<span>N/A</span>';
                }
                rowString += '</td>';
                rowString += `<td>${item.priceMode.toUpperCase()}</td>`;
                const totalAdditionalServicesPrice = !item.additionalServices || item.additionalServices.length <= 0 ? 0 : item.additionalServices.map(service => service.price).reduce((acc, curr) => acc + curr, 0);
                rowString += `<td>${currencyFormatter.format(item.servicePriceSnapshot + totalAdditionalServicesPrice)}</td>`;
                totalPrice += item.servicePriceSnapshot + totalAdditionalServicesPrice;
                document.getElementById('receiptInvoiceItems').innerHTML += rowString;
            }

            $('#receiptFormClientNames').text(`${order.customer.first_name} ${order.customer.last_name || ''}`.trim());
            $('#receiptFormTaxAmount').text(currencyFormatter.format(order.invoice.tax));
            $('#receiptFormDiscount').text(currencyFormatter.format(order.invoice.discount));
            $('#receiptFormAmountPaid').text(currencyFormatter.format(order.invoice.amountPaid));
            $('#receiptOutstanding').text(currencyFormatter.format(Math.abs(order.invoice.balance)));
            if (order.invoice.balance <= 0) {
                $('#receiptChangeLabel').text('Change:');
            } else {
                $('#receiptChangeLabel').text('Outstanding:');
            }
            $('#receiptNetPayable').text(currencyFormatter.format(Math.abs(order.invoice.netPayable)));
            $('#receiptFormComputedTotal').text(currencyFormatter.format(Math.abs(totalPrice)));
        }
        $('#updateInvoiceForm').submit(function(e) {
            e.preventDefault();
            const orderId = $('#orderIdInput').val();
            if (!orderId) return;
            const data = {...updatingInvoice
            };
            $.ajax({
                url: `/orders/${orderId}`,
                method: 'PUT',
                data,
                success: succ => {
                    Swal.fire(
                        'Success',
                        'Invoice updated successfully',
                        'success'
                    ).then(() => {
                        $('#orderFind').val('');
                        $('#invoiceUpdateFormModal').modal('hide');
                        if (!e.originalEvent.submitter.textContent.toLowerCase().includes('print')) return;
                        renderReceipt(orderId);
                    });
                },
                error: err => {
                    Swal.fire(
                        'Error',
                        err.statusText,
                        'error'
                    );
                }
            })
        });
        $('#updateInvoiceForm').validate({
            errorClass: 'text-danger d-block'
        });
        const now = new Date();
        const month = now.getMonth() + 1

            <
            10 ? `0${now.getMonth()+1}` : `${now.getMonth()+1}`;
        const day = (now.getDate() + 1)

        <
        10 ? `0${now.getDate()+1}` : `${now.getDate()+1}`;
        const minDate = `${now.getFullYear()}-${month}-${day}`;
        document.getElementById('dueDate').setAttribute('min', minDate);
        document.getElementById('dueDate').value = minDate;
        $('#newClientForm').validate({
            errorClass: 'text-danger d-block is-invalid'
        });
        $('#invoiceForm').validate({
            errorClass: 'text-danger d-block is-invalid'
        });
        $('#newClientForm').submit(function(e) {
            e.preventDefault();
            const data = {
                first_name: $(this).find('[name=first_name]').val(),
                last_name: $(this).find('[name=last_name]').val(),
                phone: $(this).find('[name=phone]').val(),
                email: $(this).find('[name=email]').val(),
                address: $(this).find('[name=address]').val(),
            };
            $.ajax({
                url: '/clients',
                data,
                method: 'POST',
                success: ({
                    client,
                    message
                }) => {
                    Swal.fire({
                        title: 'Success',
                        icon: 'success',
                        message
                    }).then(() => {
                        $('#newClientModal').modal('hide');
                        $('#newClientForm').trigger('reset');
                        $('#clientsearch option:last-child').after(`<option data-client-id="${client.id}" value="${client.id}">${client.first_name} ${client.last_name || ''}</option>`);
                        $('#clientsearch').val(client.id);
                    });
                }
            });
        });

        $('#invoiceForm').submit(function(e) {
            e.preventDefault();
            const isSaving = e.originalEvent.submitter.textContent.trim().toLowerCase() == 'save';
            if (!isSaving) {
                printInvoiceReceipt();
            }
            saveInvoiceToDatabase();
        });

        function printInvoiceReceipt() {

        }

        function saveInvoiceToDatabase() {
            const strippedEntries = [];
            for (let {
                    productId,
                    serviceId,
                    quantity,
                    priceMode,
                    additionalServices
                }
                of entries) {
                strippedEntries.push({
                    productId,
                    serviceId,
                    quantity,
                    priceMode,
                    additionalServices: additionalServices.map(({
                        serviceId
                    }) => ({
                        id: serviceId
                    }))
                });
            }
            const data = {
                orderEntries: strippedEntries,
                clientId: parseInt($('#clientsearch').val()),
                paymentType: $('#invoiceFormPaymentType').val(),
                amountPaid: parseFloat($('#invoiceFormAmountPaid').val()),
                discount: parseFloat($('#discountInput').val()),
                tax: parseFloat($('#taxInput').val()),
                dueDate: $('#dueDate').val()
            };

            $.ajax({
                url: '/orders/create',
                method: 'POST',
                data,
                success: succ => {
                    Swal.fire({
                        title: 'Success',
                        text: succ.message,
                        icon: 'success'
                    }).then(() => location.reload());
                },
                error: err => {
                    let text;
                    if (err.responseJSON && err.responseJSON.message)
                        text = err.responseJSON.message;
                    else text = 'Unable to save order';
                    Swal.fire({
                        title: 'Error',
                        text,
                        icon: 'error'
                    });
                }
            });
        }
    });
</script>