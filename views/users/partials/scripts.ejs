<script src="/static/js/vendor/jquery-3.3.1.min.js"></script>
<script src="/static/js/vendor/bootstrap.bundle.min.js"></script>
<script src="/static/js/vendor/perfect-scrollbar.min.js"></script>
<script src="/static/js/vendor/mousetrap.min.js"></script>
<script src="/static/js/vendor/jquery.contextMenu.min.js"></script>
<script src="/static/js/dore.script.js"></script>
<script src="/static/js/scripts.js"></script>
<script src="/static/js/vendor/jquery.validate/jquery.validate.min.js"></script>

<script>
    $.validator.addMethod(
        "regex",
        function(value, element, regexp) {
            var re = new RegExp(regexp);
            return this.optional(element) || re.test(value);
        },
        "Invalid input"
    );

    const currentURl = new URL(location.href);
    if (currentURl.searchParams.has('new-user-form-open')) {
        debugger;
        $('#newUserFormModal').modal({
            backdrop: 'static'
        });
    }
    const createFormNameRef = '#new-user-form';
    $('#newUserFormModal').on('shown.bs.modal', function() {
        const url = new URL(location.href);
        if (url.searchParams.has('new-user-form-open')) return;
        url.searchParams.append('new-user-form-open', true);
        const newUrl = url.toString();
        history.replaceState({
            path: newUrl
        }, '', newUrl);
    });

    $('#newUserFormModal').on('hidden.bs.modal', function() {
        const url = new URL(location.href);
        if (!url.searchParams.has('new-user-form-open')) return;
        url.searchParams.delete('new-user-form-open');
        const newUrl = url.toString();
        history.replaceState({
            path: newUrl
        }, '', newUrl);
    });

    $(createFormNameRef).validate({
        errorClass: 'text-danger is-invalid',
        messages: {
            firstName: {
                required: 'Value is required'
            },
            gender: 'Value is required',
            phoneNumber: {
                required: 'Value is required',
                regex: 'Invalid phone number'
            },
            natId: {
                required: 'Value is required',
                regex: 'Invalid National ID'
            },
            address: {
                required: 'Value is required'
            },
            username: {
                required: 'Value is required',
                remote: 'This username is not available'
            },
            password: {
                required: 'Value is required',
                minlength: 'Password must be at least 6 characters long',
                maxlength: 'Password can only be up to 100 characters long'
            },
            confirmPassword: {
                required: 'Password must be confirmed',
                equalTo: 'Passwords do not match'
            }
        },
        rules: {
            firstName: 'required',
            gender: 'required',
            phoneNumber: {
                required: true,
                regex: /^(((((\+?237)|(\(\+?237\))))\s?)?(([697])|(2))\d{8})$/gm
            },
            natId: {
                required: true,
                regex: /^\d{9}$/gm
            },
            address: 'required',
            username: {
                required: true,
                remote: {
                    url: '/users/isUsernameUnique',
                    type: 'post',
                    data: {
                        username: function() {
                            return $('#newUsername').val();
                        }
                    }
                }
            },
            password: {
                required: true,
                minlength: 6,
                maxlength: 100
            },
            confirmPassword: {
                required: true,
                equalTo: '#newPassword'
            }
        }
    });

    $(createFormNameRef).submit(function(e) {
        e.preventDefault();
        const data = {
            firstName: $(`${createFormNameRef} #newFirstName`).val(),
            lastName: $(`${createFormNameRef} #newLastName`).val(),
            gender: $(`${createFormNameRef} #newGender`).val(),
            natId: $(`${createFormNameRef} #newNatId`).val(),
            phone: $(`${createFormNameRef} #newPhone`).val(),
            address: $(`${createFormNameRef} #newAddress`).val(),
            role: $(`${createFormNameRef} #newRole`).val(),
            username: $(`${createFormNameRef} #newUsername`).val(),
            password: $(`${createFormNameRef} #newPassword`).val(),
            confirmPasswrd: $(`${createFormNameRef} #newConfirmPassword`).val(),
        };
        $.ajax({
            url: '/users',
            method: 'POST',
            data,
            success: (res) => {
                $wal.fire({
                    title: 'Success',
                    text: res.message,
                    icon: 'success'
                }).then(() => {
                    $('#newUserFormModal').hide();
                    setTimeout(() => {
                        location.reload();
                    }, 1500);
                })
            },
            error: (err) => {
                debugger;
                console.error(err);

            }
        })
    })

    // actions buttons
    $('table').on('click', '.edit-btn', function(e) {
        const id = $(this).data('id')
        $.ajax({
            url: '/clients/' + id,
            method: 'GET',
            success: (res) => {
                $('#edit_form').find('#id').val(id)
                $('#edit_form').find('#first_name').val(res.first_name)
                $('#edit_form').find('#last_name').val(res.last_name)
                $('#edit_form').find('#phone').val(res.phoneNumber)
                $('#edit_form').find('#email').val(res.role)
                $('#edit_form').find('#address').val(res.address)
                $('#editModal').modal('show')
            },
            error: (err) => {
                console.error(err)
                Swal.fire({
                    title: 'Error',
                    text: err.responseJSON.message || "Unable to delete user.",
                    icon: 'error'
                })
            }
        })
    })
    $('table').on('click', '.delete-btn', function(e) {
        const id = $(this).data('id')
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: `/clients/${id}`,
                    method: 'DELETE',
                    success: (res) => {
                        Swal.fire({
                            title: 'Success',
                            text: res.message,
                            icon: 'success'
                        }).then(() => window.location.reload())
                    },
                    error: (err) => {
                        console.error(err)
                        Swal.fire({
                            title: 'Error',
                            text: err.responseJSON.message || "Unable to delete client.",
                            icon: 'error'
                        })
                    }
                })
            }
        })
    })
</script>